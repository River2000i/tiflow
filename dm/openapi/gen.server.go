// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get cluster info such as cluster id
	// (GET /api/v1/cluster/info)
	DMAPIGetClusterInfo(c *gin.Context)
	// update cluster info.
	// (PUT /api/v1/cluster/info)
	DMAPIUpdateClusterInfo(c *gin.Context)
	// get cluster master node list
	// (GET /api/v1/cluster/masters)
	DMAPIGetClusterMasterList(c *gin.Context)
	// offline master node
	// (DELETE /api/v1/cluster/masters/{master-name})
	DMAPIOfflineMasterNode(c *gin.Context, masterName string)
	// get cluster worker node list
	// (GET /api/v1/cluster/workers)
	DMAPIGetClusterWorkerList(c *gin.Context)
	// offline worker node
	// (DELETE /api/v1/cluster/workers/{worker-name})
	DMAPIOfflineWorkerNode(c *gin.Context, workerName string)
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(c *gin.Context)
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(c *gin.Context)
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(c *gin.Context, params DMAPIGetSourceListParams)
	// create and enable a new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(c *gin.Context)
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(c *gin.Context, sourceName string, params DMAPIDeleteSourceParams)
	// get source
	// (GET /api/v1/sources/{source-name})
	DMAPIGetSource(c *gin.Context, sourceName string, params DMAPIGetSourceParams)
	// update a data source
	// (PUT /api/v1/sources/{source-name})
	DMAPIUpdateSource(c *gin.Context, sourceName string)
	// disable a data source
	// (POST /api/v1/sources/{source-name}/disable)
	DMAPIDisableSource(c *gin.Context, sourceName string)
	// enable a data source
	// (POST /api/v1/sources/{source-name}/enable)
	DMAPIEnableSource(c *gin.Context, sourceName string)
	// disable relay log function for the data source
	// (POST /api/v1/sources/{source-name}/relay/disable)
	DMAPIDisableRelay(c *gin.Context, sourceName string)
	// enable relay log function for the data source
	// (POST /api/v1/sources/{source-name}/relay/enable)
	DMAPIEnableRelay(c *gin.Context, sourceName string)
	// purge relay log
	// (POST /api/v1/sources/{source-name}/relay/purge)
	DMAPIPurgeRelay(c *gin.Context, sourceName string)
	// get source schema list
	// (GET /api/v1/sources/{source-name}/schemas)
	DMAPIGetSourceSchemaList(c *gin.Context, sourceName string)
	// get source table list
	// (GET /api/v1/sources/{source-name}/schemas/{schema-name})
	DMAPIGetSourceTableList(c *gin.Context, sourceName string, schemaName string)
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(c *gin.Context, sourceName string)
	// transfer source to a free worker
	// (POST /api/v1/sources/{source-name}/transfer)
	DMAPITransferSource(c *gin.Context, sourceName string)
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(c *gin.Context, params DMAPIGetTaskListParams)
	// create a task
	// (POST /api/v1/tasks)
	DMAPICreateTask(c *gin.Context)
	// Turn task into the format of a configuration file or vice versa.
	// (POST /api/v1/tasks/converters)
	DMAPIConvertTask(c *gin.Context)
	// get task template list
	// (GET /api/v1/tasks/templates)
	DMAPIGetTaskTemplateList(c *gin.Context)
	// create task template
	// (POST /api/v1/tasks/templates)
	DMAPICreateTaskTemplate(c *gin.Context)
	// import task template
	// (POST /api/v1/tasks/templates/import)
	DMAPIImportTaskTemplate(c *gin.Context)
	// delete task template template
	// (DELETE /api/v1/tasks/templates/{task-name})
	DMAPIDeleteTaskTemplate(c *gin.Context, taskName string)
	// get task template template
	// (GET /api/v1/tasks/templates/{task-name})
	DMAPIGetTaskTemplate(c *gin.Context, taskName string)
	// update task template template
	// (PUT /api/v1/tasks/templates/{task-name})
	DMAPUpdateTaskTemplate(c *gin.Context, taskName string)
	// delete a task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(c *gin.Context, taskName string, params DMAPIDeleteTaskParams)
	// get a task
	// (GET /api/v1/tasks/{task-name})
	DMAPIGetTask(c *gin.Context, taskName string, params DMAPIGetTaskParams)
	// update a task
	// (PUT /api/v1/tasks/{task-name})
	DMAPIUpdateTask(c *gin.Context, taskName string)
	// get task source table and target table route relation
	// (GET /api/v1/tasks/{task-name}/sources/{source-name}/migrate_targets)
	DMAPIGetTaskMigrateTargets(c *gin.Context, taskName string, sourceName string, params DMAPIGetTaskMigrateTargetsParams)
	// get task source schema list
	// (GET /api/v1/tasks/{task-name}/sources/{source-name}/schemas)
	DMAPIGetSchemaListByTaskAndSource(c *gin.Context, taskName string, sourceName string)
	// get task source table list
	// (GET /api/v1/tasks/{task-name}/sources/{source-name}/schemas/{schema-name})
	DMAPIGetTableListByTaskAndSource(c *gin.Context, taskName string, sourceName string, schemaName string)
	// delete task source table structure
	// (DELETE /api/v1/tasks/{task-name}/sources/{source-name}/schemas/{schema-name}/{table-name})
	DMAPIDeleteTableStructure(c *gin.Context, taskName string, sourceName string, schemaName string, tableName string)
	// get task source table structure
	// (GET /api/v1/tasks/{task-name}/sources/{source-name}/schemas/{schema-name}/{table-name})
	DMAPIGetTableStructure(c *gin.Context, taskName string, sourceName string, schemaName string, tableName string)
	// operate task source table structure
	// (PUT /api/v1/tasks/{task-name}/sources/{source-name}/schemas/{schema-name}/{table-name})
	DMAPIOperateTableStructure(c *gin.Context, taskName string, sourceName string, schemaName string, tableName string)
	// start a task
	// (POST /api/v1/tasks/{task-name}/start)
	DMAPIStartTask(c *gin.Context, taskName string)
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(c *gin.Context, taskName string, params DMAPIGetTaskStatusParams)
	// stop a task
	// (POST /api/v1/tasks/{task-name}/stop)
	DMAPIStopTask(c *gin.Context, taskName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// DMAPIGetClusterInfo operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetClusterInfo(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetClusterInfo(c)
}

// DMAPIUpdateClusterInfo operation middleware
func (siw *ServerInterfaceWrapper) DMAPIUpdateClusterInfo(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIUpdateClusterInfo(c)
}

// DMAPIGetClusterMasterList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetClusterMasterList(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetClusterMasterList(c)
}

// DMAPIOfflineMasterNode operation middleware
func (siw *ServerInterfaceWrapper) DMAPIOfflineMasterNode(c *gin.Context) {
	var err error

	// ------------- Path parameter "master-name" -------------
	var masterName string

	err = runtime.BindStyledParameter("simple", false, "master-name", c.Param("master-name"), &masterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter master-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIOfflineMasterNode(c, masterName)
}

// DMAPIGetClusterWorkerList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetClusterWorkerList(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetClusterWorkerList(c)
}

// DMAPIOfflineWorkerNode operation middleware
func (siw *ServerInterfaceWrapper) DMAPIOfflineWorkerNode(c *gin.Context) {
	var err error

	// ------------- Path parameter "worker-name" -------------
	var workerName string

	err = runtime.BindStyledParameter("simple", false, "worker-name", c.Param("worker-name"), &workerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter worker-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIOfflineWorkerNode(c, workerName)
}

// GetDocJSON operation middleware
func (siw *ServerInterfaceWrapper) GetDocJSON(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDocJSON(c)
}

// GetDocHTML operation middleware
func (siw *ServerInterfaceWrapper) GetDocHTML(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDocHTML(c)
}

// DMAPIGetSourceList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSourceList(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetSourceListParams

	// ------------- Optional query parameter "with_status" -------------
	if paramValue := c.Query("with_status"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "with_status", c.Request.URL.Query(), &params.WithStatus)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter with_status: %s", err)})
		return
	}

	// ------------- Optional query parameter "enable_relay" -------------
	if paramValue := c.Query("enable_relay"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "enable_relay", c.Request.URL.Query(), &params.EnableRelay)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter enable_relay: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSourceList(c, params)
}

// DMAPICreateSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPICreateSource(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPICreateSource(c)
}

// DMAPIDeleteSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIDeleteSourceParams

	// ------------- Optional query parameter "force" -------------
	if paramValue := c.Query("force"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "force", c.Request.URL.Query(), &params.Force)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter force: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteSource(c, sourceName, params)
}

// DMAPIGetSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetSourceParams

	// ------------- Optional query parameter "with_status" -------------
	if paramValue := c.Query("with_status"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "with_status", c.Request.URL.Query(), &params.WithStatus)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter with_status: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSource(c, sourceName, params)
}

// DMAPIUpdateSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIUpdateSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIUpdateSource(c, sourceName)
}

// DMAPIDisableSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDisableSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDisableSource(c, sourceName)
}

// DMAPIEnableSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIEnableSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIEnableSource(c, sourceName)
}

// DMAPIDisableRelay operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDisableRelay(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDisableRelay(c, sourceName)
}

// DMAPIEnableRelay operation middleware
func (siw *ServerInterfaceWrapper) DMAPIEnableRelay(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIEnableRelay(c, sourceName)
}

// DMAPIPurgeRelay operation middleware
func (siw *ServerInterfaceWrapper) DMAPIPurgeRelay(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIPurgeRelay(c, sourceName)
}

// DMAPIGetSourceSchemaList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSourceSchemaList(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSourceSchemaList(c, sourceName)
}

// DMAPIGetSourceTableList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSourceTableList(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSourceTableList(c, sourceName, schemaName)
}

// DMAPIGetSourceStatus operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSourceStatus(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSourceStatus(c, sourceName)
}

// DMAPITransferSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPITransferSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPITransferSource(c, sourceName)
}

// DMAPIGetTaskList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskList(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetTaskListParams

	// ------------- Optional query parameter "with_status" -------------
	if paramValue := c.Query("with_status"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "with_status", c.Request.URL.Query(), &params.WithStatus)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter with_status: %s", err)})
		return
	}

	// ------------- Optional query parameter "stage" -------------
	if paramValue := c.Query("stage"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "stage", c.Request.URL.Query(), &params.Stage)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stage: %s", err)})
		return
	}

	// ------------- Optional query parameter "source_name_list" -------------
	if paramValue := c.Query("source_name_list"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "source_name_list", c.Request.URL.Query(), &params.SourceNameList)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source_name_list: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskList(c, params)
}

// DMAPICreateTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPICreateTask(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPICreateTask(c)
}

// DMAPIConvertTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIConvertTask(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIConvertTask(c)
}

// DMAPIGetTaskTemplateList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskTemplateList(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskTemplateList(c)
}

// DMAPICreateTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPICreateTaskTemplate(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPICreateTaskTemplate(c)
}

// DMAPIImportTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPIImportTaskTemplate(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIImportTaskTemplate(c)
}

// DMAPIDeleteTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteTaskTemplate(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteTaskTemplate(c, taskName)
}

// DMAPIGetTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskTemplate(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskTemplate(c, taskName)
}

// DMAPUpdateTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPUpdateTaskTemplate(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPUpdateTaskTemplate(c, taskName)
}

// DMAPIDeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIDeleteTaskParams

	// ------------- Optional query parameter "force" -------------
	if paramValue := c.Query("force"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "force", c.Request.URL.Query(), &params.Force)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter force: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteTask(c, taskName, params)
}

// DMAPIGetTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetTaskParams

	// ------------- Optional query parameter "with_status" -------------
	if paramValue := c.Query("with_status"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "with_status", c.Request.URL.Query(), &params.WithStatus)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter with_status: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTask(c, taskName, params)
}

// DMAPIUpdateTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIUpdateTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIUpdateTask(c, taskName)
}

// DMAPIGetTaskMigrateTargets operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskMigrateTargets(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetTaskMigrateTargetsParams

	// ------------- Optional query parameter "schema_pattern" -------------
	if paramValue := c.Query("schema_pattern"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "schema_pattern", c.Request.URL.Query(), &params.SchemaPattern)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema_pattern: %s", err)})
		return
	}

	// ------------- Optional query parameter "table_pattern" -------------
	if paramValue := c.Query("table_pattern"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "table_pattern", c.Request.URL.Query(), &params.TablePattern)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table_pattern: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskMigrateTargets(c, taskName, sourceName, params)
}

// DMAPIGetSchemaListByTaskAndSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSchemaListByTaskAndSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSchemaListByTaskAndSource(c, taskName, sourceName)
}

// DMAPIGetTableListByTaskAndSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTableListByTaskAndSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTableListByTaskAndSource(c, taskName, sourceName, schemaName)
}

// DMAPIDeleteTableStructure operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteTableStructure(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	// ------------- Path parameter "table-name" -------------
	var tableName string

	err = runtime.BindStyledParameter("simple", false, "table-name", c.Param("table-name"), &tableName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteTableStructure(c, taskName, sourceName, schemaName, tableName)
}

// DMAPIGetTableStructure operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTableStructure(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	// ------------- Path parameter "table-name" -------------
	var tableName string

	err = runtime.BindStyledParameter("simple", false, "table-name", c.Param("table-name"), &tableName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTableStructure(c, taskName, sourceName, schemaName, tableName)
}

// DMAPIOperateTableStructure operation middleware
func (siw *ServerInterfaceWrapper) DMAPIOperateTableStructure(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	// ------------- Path parameter "table-name" -------------
	var tableName string

	err = runtime.BindStyledParameter("simple", false, "table-name", c.Param("table-name"), &tableName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIOperateTableStructure(c, taskName, sourceName, schemaName, tableName)
}

// DMAPIStartTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIStartTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIStartTask(c, taskName)
}

// DMAPIGetTaskStatus operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskStatus(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetTaskStatusParams

	// ------------- Optional query parameter "source_name_list" -------------
	if paramValue := c.Query("source_name_list"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "source_name_list", c.Request.URL.Query(), &params.SourceNameList)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source_name_list: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskStatus(c, taskName, params)
}

// DMAPIStopTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIStopTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIStopTask(c, taskName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/v1/cluster/info", wrapper.DMAPIGetClusterInfo)

	router.PUT(options.BaseURL+"/api/v1/cluster/info", wrapper.DMAPIUpdateClusterInfo)

	router.GET(options.BaseURL+"/api/v1/cluster/masters", wrapper.DMAPIGetClusterMasterList)

	router.DELETE(options.BaseURL+"/api/v1/cluster/masters/:master-name", wrapper.DMAPIOfflineMasterNode)

	router.GET(options.BaseURL+"/api/v1/cluster/workers", wrapper.DMAPIGetClusterWorkerList)

	router.DELETE(options.BaseURL+"/api/v1/cluster/workers/:worker-name", wrapper.DMAPIOfflineWorkerNode)

	router.GET(options.BaseURL+"/api/v1/dm.json", wrapper.GetDocJSON)

	router.GET(options.BaseURL+"/api/v1/docs", wrapper.GetDocHTML)

	router.GET(options.BaseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)

	router.POST(options.BaseURL+"/api/v1/sources", wrapper.DMAPICreateSource)

	router.DELETE(options.BaseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)

	router.GET(options.BaseURL+"/api/v1/sources/:source-name", wrapper.DMAPIGetSource)

	router.PUT(options.BaseURL+"/api/v1/sources/:source-name", wrapper.DMAPIUpdateSource)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/disable", wrapper.DMAPIDisableSource)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/enable", wrapper.DMAPIEnableSource)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/relay/disable", wrapper.DMAPIDisableRelay)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/relay/enable", wrapper.DMAPIEnableRelay)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/relay/purge", wrapper.DMAPIPurgeRelay)

	router.GET(options.BaseURL+"/api/v1/sources/:source-name/schemas", wrapper.DMAPIGetSourceSchemaList)

	router.GET(options.BaseURL+"/api/v1/sources/:source-name/schemas/:schema-name", wrapper.DMAPIGetSourceTableList)

	router.GET(options.BaseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/transfer", wrapper.DMAPITransferSource)

	router.GET(options.BaseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)

	router.POST(options.BaseURL+"/api/v1/tasks", wrapper.DMAPICreateTask)

	router.POST(options.BaseURL+"/api/v1/tasks/converters", wrapper.DMAPIConvertTask)

	router.GET(options.BaseURL+"/api/v1/tasks/templates", wrapper.DMAPIGetTaskTemplateList)

	router.POST(options.BaseURL+"/api/v1/tasks/templates", wrapper.DMAPICreateTaskTemplate)

	router.POST(options.BaseURL+"/api/v1/tasks/templates/import", wrapper.DMAPIImportTaskTemplate)

	router.DELETE(options.BaseURL+"/api/v1/tasks/templates/:task-name", wrapper.DMAPIDeleteTaskTemplate)

	router.GET(options.BaseURL+"/api/v1/tasks/templates/:task-name", wrapper.DMAPIGetTaskTemplate)

	router.PUT(options.BaseURL+"/api/v1/tasks/templates/:task-name", wrapper.DMAPUpdateTaskTemplate)

	router.DELETE(options.BaseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIGetTask)

	router.PUT(options.BaseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIUpdateTask)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/migrate_targets", wrapper.DMAPIGetTaskMigrateTargets)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas", wrapper.DMAPIGetSchemaListByTaskAndSource)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas/:schema-name", wrapper.DMAPIGetTableListByTaskAndSource)

	router.DELETE(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas/:schema-name/:table-name", wrapper.DMAPIDeleteTableStructure)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas/:schema-name/:table-name", wrapper.DMAPIGetTableStructure)

	router.PUT(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas/:schema-name/:table-name", wrapper.DMAPIOperateTableStructure)

	router.POST(options.BaseURL+"/api/v1/tasks/:task-name/start", wrapper.DMAPIStartTask)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)

	router.POST(options.BaseURL+"/api/v1/tasks/:task-name/stop", wrapper.DMAPIStopTask)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
